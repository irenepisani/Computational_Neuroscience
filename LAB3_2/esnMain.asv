%% UNIVERSITY OF PISA

% Computer Science Department
% M.Sc. Computer Science, Artificial Intelligence

%% AUTHOR: IRENE PISANI

% email: i.pisani1@studenti.unipi.it
% matricola: 560104
% date: August 23

%% COMPUTATIONAL NEUROSCIENCE 22/23 - LABORATORY 3.2

% [ COMPLETED ] Assignment 1: NARMA10 task
% [ No ] Bonus-track Assignment 1: Mackey-Glass 17 task
% [ No ] Bonus-Track Assignment 2: Custom Python implementation
% [ No ] Bonus-Track Assignment 3: Sequential MNIST classification task


%%  ASSIGNMENT 1: NARMA10 task - TDNN and RNN

% This task consists in predicting the output of a 10-th order non-linear
% autoregressive moving average (NARMA) system using ESN

% For solving this assignment run the main scripts:
    % esnMain()

% Other function used in thi assignment are:
    % - EchoStateNetwork()
    % - esnRandomConfig()
    % - esnRandomizedGridSearch()

%% Main script 

% load TR/VL/TS dataset 
[trX, trY, vlX, vlY, tsX, tsY] = narma10();

% Num. configurations to try in RGS 
numTrials = 20;

% Number of reservoir guesses
numGuesses = 5;

% Run Randomized Grid Search 
[vlMSE, trMSE, bestParam]  = esnRandomizedGridSearch( ...
    trX, trY, vlX, vlY, numTrials, numGuesses);
bestParam

devX = [trX, vlX];
devY = [trY, vlY];

devMSE = zeros(1, numGuesses);
tsMSE = zeros(1, numGuesses);

for j = 1: numGuesses
    
    % Initialize the ESN
    esn = EchoStateNetwork(bestParam, 1, 100);
    
    % train and evaluate ESN
    esn = esn.trainReadout(devX, devY);
    [devMSE(j), predDEV, trainState] = esn.evaluate(devX, devY, nan);
    [tsMSE(j), predTS, ~] = esn.evaluate(tsX, tsY, trainState);
end

performance = struct();
performance.trMSE = trMSE;
performance.vlMSE = vlMSE;
performance.devMSE = mean(devMSE);
performance.testMSE = mean(tsMSE);

performance

%% Store results 
% Save model variable & the training information
% save(fullfile('Results', 'RNN-structure.mat'),'structure');
% save(fullfile('Results', 'RNN-records.mat'), 'records');

% Save optimal hyper-parameters configurations
save(fullfile('Results', 'ESN-optimal-hyperparam.mat'), 'bestParam')

save(fullfile('Results', 'ESN-W.mat'), 'bestParam')
save(fullfile('Results', 'ESN-optimal-hyperparam.mat'), 'bestParam')
save(fullfile('Results', 'ESN-optimal-hyperparam.mat'), 'bestParam')
save(fullfile('Results', 'ESN-optimal-hyperparam.mat'), 'bestParam')

% save training, validation, development (tr + vl) and test Mean Squared Error
save(fullfile('Results', 'ESN-mse.mat'), 'performance')

% Generate and save plots 
narma10Plot(predDEV, devY, predTS, tsY)