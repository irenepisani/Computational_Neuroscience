%% UNIVERSITY OF PISA
% Computer Science Department
% M.Sc. Computer Science, Artificial Intelligence

%% AUTHOR: IRENE PISANI
% email: i.pisani1@studenti.unipi.it
% matricola: 560104
% date: September 23

%% COMPUTATIONAL NEUROSCIENCE 22/23 - LABORATORY 2.2

% [ COMPLETED ] Assignment 1: Small Image Dataset
% [ No ] Bonus Track Assignment # 1 – Synthetic data
% [ No ] Bonus Track Assignment # 2 – How much can you remember?

%% Assignment 1: Small Image Dataset

% For solving these assignments run the main script:
    % hopfieldMain()
        % PARAMETERS: No input parameter are required. 
        % DESCRIPTION: Load original data and perform the storage phase of
        % the hopfield network with them. Then perform the retrieval phase
        % of the hopfield network with the distorted version of the
        % original vectors. Expploits hopfieldNetwork() and hopfieldPrturbation()
        % OUTPUT: the figure generated by hopfieldPlot()

% Other scripts or functions exploited in this assignments are:
    % hopfieldPerturbation()
    % hopfieldNetwork()
    % hopfieldPlot()

%% Main script for solving Assignment 1

%%%%%% Load input vectors P

% Elements of vector p are +1s and -1s.
P0 = readmatrix("lab2_2_data/p0.csv");
P1 = readmatrix("lab2_2_data/p1.csv");
P2 = readmatrix("lab2_2_data/p2.csv");

%%%%%% Apply small perturbations on P

% Determinate the percetage of distorsion applied to the
% vector. d = [0.05, 1]

% Get distorted version of the original vectors P with d = 0.05
d = 0.05;
perturbedP00 = hopfieldPerturbation(P0, d);
perturbedP10 = hopfieldPerturbation(P1, d);
perturbedP20 = hopfieldPerturbation(P2, d);

% Get distorted version of the original vectors P with d = 0.10
d = 0.10;
perturbedP01 = hopfieldPerturbation(P0, d);
perturbedP11 = hopfieldPerturbation(P1, d);
perturbedP21 = hopfieldPerturbation(P2, d);

% Get distorted version of the original vectors P with d = 0.25
d = 0.25;
perturbedP02 = hopfieldPerturbation(P0, d);
perturbedP12 = hopfieldPerturbation(P1, d);
perturbedP22 = hopfieldPerturbation(P2, d);

%%%%%% Network initialization and train (storage phase) 

network = hopfieldNetwork();
network = network.Storage([P0, P1, P2]);

%%%%%% Retrieval phase

epochs = 10;

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP00, epochs);
hopfieldPlot(hist, ener, over, P0, "0_0");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP01, epochs);
hopfieldPlot(hist, ener, over, P0, "0_1");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP02, epochs);
hopfieldPlot(hist, ener, over, P0, "0_2");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP10, epochs);
hopfieldPlot(hist, ener, over, P1, "1_0");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP11, epochs);
hopfieldPlot(hist, ener, over, P1, "1_1");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP12, epochs);
hopfieldPlot(hist, ener, over, P1, "1_2");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP20, epochs);
hopfieldPlot(hist, ener, over, P2, "2_0");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP21, epochs);
hopfieldPlot(hist, ener, over, P2, "2_1");

[ener, over, hist] = network.Retrieval([P0, P1, P2], perturbedP22, epochs);
hopfieldPlot(hist, ener, over, P2, "2_2");
